<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Time Traveling Gopher</title>
    <link>https://adnaan.badr.in/blog/</link>
    <description>Recent content in Blogs on Time Traveling Gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Oct 2019 18:16:30 +0200</lastBuildDate>
    
	<atom:link href="https://adnaan.badr.in/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is Devops ?</title>
      <link>https://adnaan.badr.in/blog/2019/10/20/what-is-devops/</link>
      <pubDate>Sun, 20 Oct 2019 18:16:30 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/20/what-is-devops/</guid>
      <description>There are thousands of entries out there on What is Devops ? Here&amp;rsquo;s my understanding on the subject.
 Devops is a set of technical and non-technical practices tuned to quickly deliver product experiences which meets the customer&amp;rsquo;s expectations at a reasonable cost.
 Let&amp;rsquo;s break it down Assuming that the below concepts are already understood, here is a list of considerations for the above claim.
Technical Practices  Continuous Integration, Delivery, Deployment.</description>
    </item>
    
    <item>
      <title>How to Mock in Go</title>
      <link>https://adnaan.badr.in/blog/2019/01/10/how-to-mock-in-go/</link>
      <pubDate>Thu, 10 Jan 2019 20:06:52 +0000</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/01/10/how-to-mock-in-go/</guid>
      <description>We often need to simulate or mimic an object to create a deterministic, fast and network-independent object. Such an object is useful while testing. This practice is also known as mocking. Let&amp;rsquo;s look at a few approaches to mock in Go. Since database is one of the components which is often mocked, let&amp;rsquo;s look at a stubbed out example for it.
Example So if you have a type User.</description>
    </item>
    
    <item>
      <title>A Statsd HTTP Handler Wrapper</title>
      <link>https://adnaan.badr.in/blog/2017/07/20/a-statsd-http-handler-wrapper/</link>
      <pubDate>Thu, 20 Jul 2017 16:46:28 +0000</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2017/07/20/a-statsd-http-handler-wrapper/</guid>
      <description>Statsd is a simple and effective tool to trace app metrics: http request latency, throughput, runtime metrics etc. Using the package alexcesaro/statsd.v2, tracking response time of a request is a one liner:
func main(){ r := chi.NewRouter() r.Get(&amp;quot;/&amp;quot;,handleHome) } func handleHome(w http.ResponseWriter, r *http.Request) { defer c.NewTiming().Send(&amp;quot;homepage.response_time&amp;quot;) defer c.Increment(&amp;quot;foo.counter&amp;quot;) time.Sleep(time.Millisecond * 1000) w.WriteHeader(http.StatusOK) w.Write([]byte(&amp;quot;OK&amp;quot;)) }  But this gets cumbersome if you have more than a couple of handlers and would want to track other metrics too.</description>
    </item>
    
    <item>
      <title>Exploring Dependency Injection in Go</title>
      <link>https://adnaan.badr.in/blog/2017/07/15/exploring-dependency-injection-in-go/</link>
      <pubDate>Sat, 15 Jul 2017 03:42:44 +0000</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2017/07/15/exploring-dependency-injection-in-go/</guid>
      <description>Introduction There is a lot of material available about the pros and cons of Dependency Injection. This post is less about the pattern itself and more about its implementation design and it&amp;rsquo;s side-effects w.r.t Go. Let&amp;rsquo;s setup a context for Go users : As a clean programming practice, the theory of dependency injection is quite simple across several languages:
 A dependency is passed to an object as an argument rather than the object creating or finding it.</description>
    </item>
    
  </channel>
</rss>