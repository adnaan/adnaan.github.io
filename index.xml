<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Time Traveling Gopher</title>
    <link>https://adnaan.badr.in/</link>
    <description>Recent content on Time Traveling Gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Jan 2021 14:32:50 +0100</lastBuildDate><atom:link href="https://adnaan.badr.in/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Devops is Dead</title>
      <link>https://adnaan.badr.in/blog/2021/01/25/devops-is-dead/</link>
      <pubDate>Mon, 25 Jan 2021 14:32:50 +0100</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2021/01/25/devops-is-dead/</guid>
      <description>The claim: Devops is Dead, seems to be common knowledge. I have heard this in hushed tones over the last couple of years and it&amp;rsquo;s turning quickly into more than whispers. But what does it mean ?
The term &amp;ldquo;devops&amp;rdquo; itself has a lot of meanings. Devops can refer to a role or a process of releasing software. Here we are talking about the role which used to specialise in operating systems, monitoring and CI/CD tools with a 80:20 division of work.</description>
    </item>
    
    <item>
      <title>Go Modest</title>
      <link>https://adnaan.badr.in/blog/2020/12/24/go-modest/</link>
      <pubDate>Thu, 24 Dec 2020 15:52:31 +0100</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2020/12/24/go-modest/</guid>
      <description>Github: https://github.com/adnaan/gomodest
GOMODEST is a Multi Page App(MPA) starter kit using Go&amp;rsquo;s html/template, SvelteJS and StimulusJS. It is inspired from modest approaches to building webapps as enlisted in https://modestjs.works/. It can be used as a template to spin off simple Go webapps.
Motivation I am a devops engineer who dabbles in UI for side projects, internal tools and such. The SPA/ReactJS ecosystem is too costly for me. This is an alternative approach.</description>
    </item>
    
    <item>
      <title>Go Trick: Vendoring Non-Package Directory</title>
      <link>https://adnaan.badr.in/blog/2020/03/13/go-trick-vendoring-non-package-directory/</link>
      <pubDate>Fri, 13 Mar 2020 11:45:12 +0100</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2020/03/13/go-trick-vendoring-non-package-directory/</guid>
      <description>After go version 1.13+, go mod -vendor prunes non-package directories from vendor. This is noted here: https://github.com/golang/go/issues/26366
So, how do we include a non-package directory(sql migrations, yamls etc.) to be included in the vendor ?
Example directory:
1 2 3 4  migrations create_table.sql.up create_table.sql.down migrations.go   migrations.go:
1 2  // +build migrations package migrations   The conditionally compiled file migrations.go will force go mod -vendor to include it.</description>
    </item>
    
    <item>
      <title>Devops: Tooling Over Processes</title>
      <link>https://adnaan.badr.in/blog/2019/10/26/devops-tooling-over-processes/</link>
      <pubDate>Sat, 26 Oct 2019 09:37:33 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/26/devops-tooling-over-processes/</guid>
      <description>Devops is a set of technical and non-technical processes. I have talked about it previously here: What is Devops ?.
But how do we go about executing these processes ?
 In engineering, a process is a series of interrelated tasks that, together, transform inputs into Automation system
 Source: Wikipedia
A process can be encoded in a document, enforced by a human or automated by a tool. In this post, I claim that any process worth adopting must be done via a tool.</description>
    </item>
    
    <item>
      <title>Go Pattern: Is Zero Value a Change ?</title>
      <link>https://adnaan.badr.in/blog/2019/10/25/go-pattern-is-zero-value-a-change/</link>
      <pubDate>Fri, 25 Oct 2019 13:18:27 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/25/go-pattern-is-zero-value-a-change/</guid>
      <description>As we know in Go, variables declared without an explicit initial value are assigned their zero value.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  package main import &amp;#34;fmt&amp;#34; type data struct { a string } func main() { var d data fmt.Printf(&amp;#34;%+v&amp;#34;,d) } // go run main.go // output: {a:}    Here a is an empty string. This is ok.</description>
    </item>
    
    <item>
      <title>Ops: My K8s Cli Toolset</title>
      <link>https://adnaan.badr.in/blog/2019/10/25/ops-my-k8s-cli-toolset/</link>
      <pubDate>Fri, 25 Oct 2019 07:31:21 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/25/ops-my-k8s-cli-toolset/</guid>
      <description>In the last couple of months, the command line tools I have been using to interact with kubernetes hasn&amp;rsquo;t seen any additions. It&amp;rsquo;s a good time to write it down.
  kube-ps1: Sets the current k8s ctx as info line to your prompt.
  kubectx, kubens + fzf: Switch quickly between contexts and namespaces.
  k9s: Control Panel for your k8s collector
  kail: See aggregated logs from the cluster based on pattern matched filters.</description>
    </item>
    
    <item>
      <title>Go Pattern: Test Rig Func</title>
      <link>https://adnaan.badr.in/blog/2019/10/23/go-pattern-test-rig-func/</link>
      <pubDate>Wed, 23 Oct 2019 16:33:01 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/23/go-pattern-test-rig-func/</guid>
      <description>Often we need per-test setup and teardown. This is especially useful for third party integration testing, for e.g. testing against a database.
It looks fairly simple. Extending the example from a previous post: Nifty Go Pkg: ory/dockertest
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  func redisRig(t *testing.T, fn func(rdb *redis.</description>
    </item>
    
    <item>
      <title>Nifty Go Pkg: ory/dockertest</title>
      <link>https://adnaan.badr.in/blog/2019/10/22/nifty-go-pkg-ory/dockertest/</link>
      <pubDate>Tue, 22 Oct 2019 08:31:33 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/22/nifty-go-pkg-ory/dockertest/</guid>
      <description>A package I often use and find extremely useful for intergation testing is dockertest
Use Case You want to setup and tear down a real database for each integration test run.
Example An example from the dockertest repository
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  var db *redis.Client var err error pool, err = dockertest.</description>
    </item>
    
    <item>
      <title>Go Pattern: Supervise Multiple Servers</title>
      <link>https://adnaan.badr.in/blog/2019/10/21/go-pattern-supervise-multiple-servers/</link>
      <pubDate>Mon, 21 Oct 2019 09:59:25 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/21/go-pattern-supervise-multiple-servers/</guid>
      <description>This post describes a simple pattern to supervise multiple http/grpc/tcp servers in a go program.
Packages Used: context, errgroup, os, os/signal
After receiving a termination signal, we wait on multiple servers to shut them down gracefully. This is done using the errgroup package.
1 2 3 4 5  $ go run main.go 2019/10/21 11:55:59 server 2 listening on port 8081 2019/10/21 11:55:59 server 1 listening on port 8080 ^C2019/10/21 11:56:10 shutting down servers, please wait.</description>
    </item>
    
    <item>
      <title>What is Devops ?</title>
      <link>https://adnaan.badr.in/blog/2019/10/20/what-is-devops/</link>
      <pubDate>Sun, 20 Oct 2019 18:16:30 +0200</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/10/20/what-is-devops/</guid>
      <description>There are thousands of entries out there on What is Devops ? Here&amp;rsquo;s my understanding on the subject.
 Devops is a set of technical and non-technical practices tuned to quickly deliver product experiences which meets the customer&amp;rsquo;s expectations at a reasonable cost.
 Let&amp;rsquo;s break it down Assuming that the below concepts are already understood, here is a list of considerations for the above claim.
Technical Practices   Continuous Integration, Delivery, Deployment.</description>
    </item>
    
    <item>
      <title>How to Mock in Go</title>
      <link>https://adnaan.badr.in/blog/2019/01/10/how-to-mock-in-go/</link>
      <pubDate>Thu, 10 Jan 2019 20:06:52 +0000</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2019/01/10/how-to-mock-in-go/</guid>
      <description>We often need to simulate or mimic an object to create a deterministic, fast and network-independent object. Such an object is useful while testing. This practice is also known as mocking. Let&amp;rsquo;s look at a few approaches to mock in Go. Since database is one of the components which is often mocked, let&amp;rsquo;s look at a stubbed out example for it.
Example So if you have a type User.
1 2 3 4 5  .</description>
    </item>
    
    <item>
      <title>A Statsd HTTP Handler Wrapper</title>
      <link>https://adnaan.badr.in/blog/2017/07/20/a-statsd-http-handler-wrapper/</link>
      <pubDate>Thu, 20 Jul 2017 16:46:28 +0000</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2017/07/20/a-statsd-http-handler-wrapper/</guid>
      <description>Statsd is a simple and effective tool to trace app metrics: http request latency, throughput, runtime metrics etc. Using the package alexcesaro/statsd.v2, tracking response time of a request is a one liner:
1 2 3 4 5 6 7 8 9 10 11 12 13  func main(){ r := chi.NewRouter() r.Get(&amp;#34;/&amp;#34;,handleHome) } func handleHome(w http.ResponseWriter, r *http.Request) { defer c.NewTiming().Send(&amp;#34;homepage.response_time&amp;#34;) defer c.Increment(&amp;#34;foo.counter&amp;#34;) time.Sleep(time.Millisecond * 1000) w.WriteHeader(http.StatusOK) w.Write([]byte(&amp;#34;OK&amp;#34;)) }   But this gets cumbersome if you have more than a couple of handlers and would want to track other metrics too.</description>
    </item>
    
    <item>
      <title>Exploring Dependency Injection in Go</title>
      <link>https://adnaan.badr.in/blog/2017/07/15/exploring-dependency-injection-in-go/</link>
      <pubDate>Sat, 15 Jul 2017 03:42:44 +0000</pubDate>
      
      <guid>https://adnaan.badr.in/blog/2017/07/15/exploring-dependency-injection-in-go/</guid>
      <description>Introduction There is a lot of material available about the pros and cons of Dependency Injection. This post is less about the pattern itself and more about its implementation design and it&amp;rsquo;s side-effects w.r.t Go. Let&amp;rsquo;s setup a context for Go users : As a clean programming practice, the theory of dependency injection is quite simple across several languages:
 A dependency is passed to an object as an argument rather than the object creating or finding it.</description>
    </item>
    
  </channel>
</rss>
