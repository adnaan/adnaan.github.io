<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Time Traveling Gopher</title>
    <link>/post/</link>
    <description>Recent content in Posts on Time Traveling Gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jan 2019 20:06:52 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Mock in Go</title>
      <link>/post/how-to-mock-in-go/</link>
      <pubDate>Thu, 10 Jan 2019 20:06:52 +0000</pubDate>
      
      <guid>/post/how-to-mock-in-go/</guid>
      <description>We often need to simulate or mimic an object to create a deterministic, fast and network-independent object. Such an object is useful while testing. This practice is also known as mocking. Let&amp;rsquo;s look at a few approaches to mock in Go. Since database is one of the components which is often mocked, let&amp;rsquo;s look at a stubbed out example for it.
Example So if you have a type User.</description>
    </item>
    
    <item>
      <title>A Statsd HTTP Handler Wrapper</title>
      <link>/post/a-statsd-http-handler-wrapper/</link>
      <pubDate>Thu, 20 Jul 2017 16:46:28 +0000</pubDate>
      
      <guid>/post/a-statsd-http-handler-wrapper/</guid>
      <description>Statsd is a simple and effective tool to trace app metrics: http request latency, throughput, runtime metrics etc. Using the package alexcesaro/statsd.v2, tracking response time of a request is a one liner:
func main(){ r := chi.NewRouter() r.Get(&amp;quot;/&amp;quot;,handleHome) } func handleHome(w http.ResponseWriter, r *http.Request) { defer c.NewTiming().Send(&amp;quot;homepage.response_time&amp;quot;) defer c.Increment(&amp;quot;foo.counter&amp;quot;) time.Sleep(time.Millisecond * 1000) w.WriteHeader(http.StatusOK) w.Write([]byte(&amp;quot;OK&amp;quot;)) }  But this gets cumbersome if you have more than a couple of handlers and would want to track other metrics too.</description>
    </item>
    
  </channel>
</rss>